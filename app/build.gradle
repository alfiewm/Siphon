apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.2"
    def versionMajor = 1
    def versionMinor = 5

    defaultConfig {
        applicationId "com.yuantiku.siphon"
        minSdkVersion 16
        targetSdkVersion 22
        versionCode versionMajor * 10 + versionMinor
        versionName "${versionMajor}.${versionMinor}"
        resValue "string", "fir_api_token", "7a1f9c7e3ec66f6052f1db329e2abf62"
        javaCompileOptions { annotationProcessorOptions { includeCompileClasspath = true } }
    }

//    signingConfigs {
//        signingConf {
//            storeFile file(project.property("signConf.keystoreFile"))
//            storePassword project.property("signConf.storePassword")
//            keyAlias project.property("signConf.keyAlias")
//            keyPassword project.property("signConf.keyPassword")
//        }
//    }

    def getCommit = { ->
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', "--short", 'HEAD'
            standardOutput = stdout
        }
        return stdout.toString().trim().substring(0, 4)
    }

    def renameOutputApkFile = { variant, defaultConfig ->
        variant.outputs.each { output ->
            def file = output.outputFile
            def fileName = file.name
            if (variant.buildType.name.equals("release")) {
                fileName = "siphon-${defaultConfig.versionName}.apk"
            } else {
                fileName = "siphon-debug-${getCommit()}.apk"
            }
            output.outputFileName = fileName
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro', 'libs/annotations.pro'
//            signingConfig signingConfigs.signingConf
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro', 'libs/annotations.pro'
//            signingConfig signingConfigs.signingConf
            applicationVariants.all { variant ->
                renameOutputApkFile(variant, defaultConfig)
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }

}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile "com.android.support:appcompat-v7:${project.supportLibVersion}"
    compile "com.android.support:design:${project.supportLibVersion}"
    compile 'io.reactivex:rxandroid:1.0.1'
    compile 'com.squareup.retrofit:retrofit:1.9.0'
    compile 'org.jsoup:jsoup:1.6.1'
    compile 'com.jakewharton:butterknife:7.0.1'
    compile 'com.squareup:otto:1.3.8'
    compile 'com.squareup.okhttp:okhttp:2.3.0'
    compile 'commons-io:commons-io:2.0.1'
    compile 'com.pnikosis:materialish-progress:1.5'
    compile 'com.koushikdutta.ion:ion:2.1.9'
    compile 'com.orhanobut:hawk:1.18'
    compile 'se.emilsjolander:sprinkles:1.2.0'
    compile "com.google.dagger:dagger:2.0.1"
    annotationProcessor "com.google.dagger:dagger-compiler:2.0.1"

    compile 'be.shouldit:android-proxy-library:4.2.6'
    // Unit testing dependencies
    testCompile 'junit:junit:4.12'
    // Set this dependency if you want to use Mockito
    testCompile 'org.mockito:mockito-core:1.10.19'
    // Set this dependency if you want to use Hamcrest matching
    androidTestCompile 'org.hamcrest:hamcrest-library:1.1'
}
